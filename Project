# Main function that serves as the entry point for the program
def main():
    # Display a welcome banner with program details
    print("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
    print("‚ïë                                                                             ‚ïë")
    print("‚ïë                    Welcome to the Python Learning Program!                  ‚ïë")
    print("‚ïë                                 Learn Python                                ‚ïë")
    print("‚ïë                                                                             ‚ïë")
    print("‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£")
    print("‚ïë   Beginner           ‚îÇ Intermediate              ‚îÇ Advanced                 ‚ïë")
    print("‚ïë  ‚óè Data Types        ‚îÇ ‚óè List Comprehensions     ‚îÇ ‚óè Classes and Objects    ‚ïë")
    print("‚ïë  ‚óè Loops             ‚îÇ ‚óè Exception Handling      ‚îÇ ‚óè Decorators             ‚ïë")
    print("‚ïë  ‚óè Control Structure ‚îÇ ‚óè File Handling           ‚îÇ ‚óè Regular Expressions    ‚ïë")
    print("‚ïë  ‚óè Functions         ‚îÇ ‚óè Lambda Functions        ‚îÇ ‚óè Generators             ‚ïë")
    print("‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£")
    print("‚ïë                  Learn Python and build your skills progressively!          ‚ïë")
    print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")

    # Infinite loop to keep the program running until the user exits
    while True:
        # Display a menu of Python concepts
        print("\n--- Python Concepts Menu ---")
        print("Beginner ")
        print("1. Data Types")
        print("2. Control Structures (if statements)")
        print("3. Loops")
        print("4. Functions")
        print("Intermediate ")
        print("5. List Comprehensions")
        print("6. Exception Handling")
        print("7. File Handling")
        print("8. Lambda Functions")
        print("Advanced ")
        print("9. Classes and Objects")
        print("10. Decorators")
        print("11. Regular Expressions")
        print("12. Generators")

        choice = input("Choose a concept (1-12) or type 'Exit' to quit: ")  # Prompt user for input

        if choice == '1':  # Explain data types
            print("\n--- Data Types List ---")
            print("Python has several built-in data types to store values. Here are the main types:")
            print("Numeric Types: int, float, complex")
            print("Sequence Types: str, list, tuple")
            print("Set Types: set, frozenset")
            print("Mapping Type: dict")
            print("Boolean Type: bool")

        elif choice == '2':  # Explain control structures
            print("\n--- Control Structures (if statements) ---")
            print("Control structures like if statements allow you to execute code based on conditions.")
            print("Example:")
            print("if x > 10: print('x is greater than 10')")

        elif choice == '3':  # Explain loops
            print("\n--- Loops ---")
            print("Loops are used for iterating over a sequence (like a list or a string).")
            print("Example of a for loop:")
            print("for x in range(5): print(x)")

        elif choice == '4':  # Explain functions
            print("\n--- Functions ---")
            print("Functions are reusable pieces of code that perform a specific task.")
            print("Example:")
            print("def greet(name): return f'Hello, {name}!'")

        elif choice == '5':  # Explain list comprehensions
            print("\n--- List Comprehensions ---")
            print("List comprehensions provide a concise way to create lists.")
            print("Example: even_numbers = [num for num in range(10) if num % 2 == 0]")

        elif choice == '6':  # Explain exception handling
            print("\n--- Exception Handling ---")
            print("Exception handling helps prevent crashes from errors.")
            print("Example: try-except block to handle invalid input.")

        elif choice == '7':  # Explain file handling
            print("\n--- File Handling ---")
            print("File handling is used to read, write, and manage files.")
            print("Example: with open('file.txt', 'r') as file: content = file.read()")

        elif choice == '8':  # Explain lambda functions
            print("\n--- Lambda Functions ---")
            print("Lambda functions are anonymous, small, and simple functions.")
            print("Example: add = lambda x, y: x + y")

        elif choice == '9':  # Explain classes and objects
            print("\n--- Classes and Objects ---")
            print("Classes define the structure of objects.")
            print("Example: class Dog: def bark(self): print('Woof!')")

        elif choice == '10':  # Explain decorators
            print("\n--- Decorators ---")
            print("Decorators modify the behavior of a function.")
            print("Example: def decorator(func): return wrapper")

        elif choice == '11':  # Explain regular expressions
            print("\n--- Regular Expressions ---")
            print("Regular expressions are patterns used to match text.")
            print("Example: import re; re.match('pattern', 'text')")

        elif choice == '12':  # Explain generators
            print("\n--- Generators ---")
            print("Generators are functions that yield values one at a time.")
            print("Example: def count_up_to(n): yield from range(n)")

        elif choice.lower() == 'exit':  # Exit the program
            print("ü•∞ Thank you for using the Python Learning Program. Goodbye! ü•∞")
            break

        else:  # Handle invalid inputs
            print("üôÖüèª‚Äç‚ôÇÔ∏è Invalid option. Please choose a number between 1 and 12.")

        # Prompt to return to the main menu
        input("\nPress Enter to return to the main menu.")


# Check if the script is run as the main module and execute the main function
if __name__ == "__main__":
    main()
