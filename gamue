import pygame, random, math
from pygame import mixer

# Starting the Pygame
pygame.init()

# Set the screen to fullscreen
screen = pygame.display.set_mode((0, 0), pygame.FULLSCREEN)

# Add background music
mixer.music.load("background.wav")
mixer.music.play(2)

# Screen setup
SCREEN_WIDTH, SCREEN_HEIGHT = 1000, 700
screens = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Defeat The Immortal Alien")

# Colors and images
BLACK, WHITE, RED, GREEN = (0, 0, 0), (255, 255, 255), (255, 0, 0), (0, 255, 0)
player_img = pygame.image.load("player.png")
boss_img = pygame.image.load("alien.png")
player_bullet_img = pygame.image.load("bullet.png")
boss_bullet_img = pygame.image.load("alien_bullet.png")
background_img = pygame.image.load("background.png")

# Player settings
player_x, player_y = SCREEN_WIDTH // 2, SCREEN_HEIGHT - 60
player_speed = 10
player_x_change, player_y_change = 0, 0
health = 50

# Boss settings
boss_x, boss_y = SCREEN_WIDTH // 2 - 32, 50
boss_speed_x, boss_speed_y = 2, 1
boss_direction_x, boss_direction_y = 1, 1
boss_health = 100
boss_max_health = boss_health
boss_bullet_speed = 4
boss_attack_cooldown = 0
boss_attack_pattern = 0

# Game settings
level, score = 1, 0
boss_bullets = []
bullet_cooldown = 0

# Bullet settings
player_bullets = []
player_bullet_speed = 10
AUTO_FIRE_RATE = 2

# Fonts
font_large = pygame.font.Font(None, 74)
font_small = pygame.font.Font(None, 36)

# Functions
def player(x, y):
    screen.blit(player_img, (x, y))

def boss(x, y):
    screen.blit(boss_img, (x, y))

def fire_player_bullet(x, y):
    player_bullets.append({"x": x + 23, "y": y})

def fire_boss_bullet(x, y, angle):
    boss_bullets.append({
        "x": x, "y": y,
        "x_change": boss_bullet_speed * math.cos(angle),
        "y_change": boss_bullet_speed * math.sin(angle)
    })

#Collision for bullets boss and player

RED_AREA_Y = 40  # Adjust based on actual position of the red area in the player image
RED_AREA_HEIGHT = 20  # Adjust based on the height of the red area

def is_bullet_hitting_red_area(bullet_x, bullet_y, player_xes, player_yes):
    # Calculate the red area's position relative to the player
    red_area_top = player_yes + RED_AREA_Y
    red_area_bottom = red_area_top + RED_AREA_HEIGHT

    # Check if the bullet is within the horizontal bounds of the player
    if player_xes <= bullet_x <= player_x + player_img.get_width():
        # Check if the bullet is within the vertical bounds of the red area
        return red_area_top <= bullet_y <= red_area_bottom
    return False

# Define the purple line's region (assumed to be part of the boss image).
PURPLE_LINE_Y = 70  # Adjust based on actual position of the purple line in the boss image
PURPLE_LINE_HEIGHT = 10  # Adjust based on the thickness of the purple line

def is_bullet_hitting_purple_line(bullet_x, bullet_y, boss_xis, boss_yis):
    # Calculate the purple line's position relative to the boss
    purple_line_top = boss_yis + PURPLE_LINE_Y
    purple_line_bottom = purple_line_top + PURPLE_LINE_HEIGHT

    # Check if the bullet is within the horizontal bounds of the boss
    if boss_xis <= bullet_x <= boss_x + boss_img.get_width():
        # Check if the bullet is within the vertical bounds of the purple line
        return purple_line_top <= bullet_y <= purple_line_bottom
    return False


def is_collision(x1, y1, x2, y2):
    return math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2) < 27

def show_game_over():
    screen.blit(font_large.render("GAME OVER", True, WHITE), (SCREEN_WIDTH // 2 - 150, SCREEN_HEIGHT // 2 - 50))
    screen.blit(font_small.render("Press R to Retry", True, WHITE), (SCREEN_WIDTH // 2 - 100, SCREEN_HEIGHT // 2 + 20))

def show_score(x, y):
    screen.blit(font_small.render(f"Score: {score}", True, WHITE), (x, y))

def show_level(x, y):
    screen.blit(font_small.render(f"Level: {level}", True, WHITE), (x, y))

def show_lives(x, y):
    screen.blit(font_small.render(f"Health: {health}", True, WHITE), (x, y))

def show_boss_health():
    health_bar_width = 400
    current_health_width = int((boss_health / boss_max_health) * health_bar_width)
    pygame.draw.rect(screen, RED, (200, 10, health_bar_width, 20))
    pygame.draw.rect(screen, GREEN, (200, 10, current_health_width, 20))

def reset_boss():
    global boss_health, boss_max_health, boss_attack_pattern, boss_x, boss_y
    boss_health = boss_max_health = 100 + (level - 1) * 50
    boss_attack_pattern = 0
    boss_x, boss_y = SCREEN_WIDTH // 2 - 32, 50

def reset_game():
    global player_x, player_y, player_x_change, player_y_change, health, score, level, boss_bullets, player_bullets
    player_x, player_y = SCREEN_WIDTH // 2, SCREEN_HEIGHT - 60
    player_x_change, player_y_change = 0, 0
    health, score, level = 3, 0, 1
    boss_bullets.clear()
    player_bullets.clear()
    reset_boss()

#Boss attack function
def boss_attack():
    global boss_attack_cooldown, boss_attack_pattern
    if boss_attack_cooldown == 0:
        if boss_attack_pattern % 5 == 0:
            for i in range(36):
                angle = math.radians(i * 10 + (level * 5))
                fire_boss_bullet(boss_x + 32, boss_y + 32, angle)
        elif boss_attack_pattern % 5 == 1:
            for i in range(-2, 3):
                angle = math.radians(90 + (i * 20))
                fire_boss_bullet(boss_x + 32 + i * 10, boss_y + 32, angle)
        elif boss_attack_pattern % 5 == 2:
            for angle in range(0, 360, 30):
                fire_boss_bullet(boss_x + 32, boss_y + 32, math.radians(angle))
        elif boss_attack_pattern % 5 == 3:
            dx = player_x - boss_x
            dy = player_y - boss_y
            angle = math.atan2(dy, dx)
            fire_boss_bullet(boss_x + 32, boss_y + 32, angle)
        elif boss_attack_pattern % 5 == 4:
            for _ in range(1):
                angle = random.uniform(0, math.pi * 2)
                fire_boss_bullet(boss_x + 32, boss_y + 32, angle)

        boss_attack_pattern += 1
        boss_attack_cooldown = 30 - (level * 2)
    else:
        boss_attack_cooldown -= 1

def show_main_menu():
    screen.fill(BLACK)
    screen.blit(font_large.render("Defeat The Immortal Alien", True, WHITE), (SCREEN_WIDTH // 2 - 315, SCREEN_HEIGHT // 2 - 100))
    screen.blit(font_small.render("Press ENTER to Start", True, WHITE), (SCREEN_WIDTH // 2 - 100, SCREEN_HEIGHT // 2 + 20))
    screen.blit(font_small.render("Press Q to Quit", True, WHITE), (SCREEN_WIDTH // 2 - 70, SCREEN_HEIGHT // 2 + 70))
    pygame.display.update()

running, game_over, in_main_menu = True, False, True

# Main game loop
reset_boss()

while running:
    if in_main_menu:
        show_main_menu()
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_RETURN:
                    in_main_menu = False  # Start the game
                elif event.key == pygame.K_q:
                    running = False  # Quit the game
    else:
        screen.fill(BLACK)
        screen.blit(background_img, (0, 0))

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.KEYDOWN:
                if not game_over:
                    if event.key == pygame.K_a:
                        player_x_change = -player_speed
                    elif event.key == pygame.K_d:
                        player_x_change = player_speed
                    elif event.key == pygame.K_w:
                        player_y_change = -player_speed
                    elif event.key == pygame.K_s:
                        player_y_change = player_speed
                elif event.key == pygame.K_r:
                    game_over = False
                    reset_game()
            elif event.type == pygame.KEYUP:
                if event.key in [pygame.K_a, pygame.K_d]:
                    player_x_change = 0
                if event.key in [pygame.K_w, pygame.K_s]:
                    player_y_change = 0

        if bullet_cooldown == 0:
            fire_player_bullet(player_x, player_y)
            bullet_cooldown = AUTO_FIRE_RATE
        else:
            bullet_cooldown -= 1

        if not game_over:
            player_x = max(0, min(SCREEN_WIDTH - 64, player_x + player_x_change))
            player_y = max(0, min(SCREEN_HEIGHT - 64, player_y + player_y_change))

            boss_x += boss_speed_x * boss_direction_x
            boss_y += boss_speed_y * boss_direction_y

            if boss_x <= 0 or boss_x >= SCREEN_WIDTH - 64:
                boss_direction_x *= -1
            if boss_y <= 20 or boss_y >= 150:
                boss_direction_y *= -1

            boss_attack()

            for bullet in boss_bullets[:]:
                bullet["x"] += bullet["x_change"]
                bullet["y"] += bullet["y_change"]
                if bullet["y"] > SCREEN_HEIGHT or bullet["x"] < 0 or bullet["x"] > SCREEN_WIDTH:
                    boss_bullets.remove(bullet)
                elif is_bullet_hitting_red_area(bullet["x"], bullet["y"], player_x, player_y):
                    health -= 1
                    boss_bullets.remove(bullet)
                    if health == 0:
                        game_over = True
                screen.blit(boss_bullet_img, (bullet["x"], bullet["y"]))

            for bullet in player_bullets[:]:
                bullet["y"] -= player_bullet_speed
                if bullet["y"] < 0:
                    player_bullets.remove(bullet)
                elif is_bullet_hitting_purple_line(bullet["x"], bullet["y"], boss_x, boss_y):
                    boss_health -= 2
                    player_bullets.remove(bullet)
                    if boss_health <= 0:
                        score += 250
                        level += 1
                        reset_boss()
                screen.blit(player_bullet_img, (bullet["x"], bullet["y"]))

            player(player_x, player_y)
            boss(boss_x, boss_y)
            show_score(10, 10)
            show_level(10, 40)
            show_lives(10, 70)
            show_boss_health()

        if game_over:
            show_game_over()

        pygame.display.update()
